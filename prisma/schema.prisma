// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  username String    @unique
  fullName   String?

  phone    String?
  address  String?

  password Password?

  bookings Booking[]

  doctor Doctor?

review Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Doctor {
  id      String  @id @default(cuid())
  image String?

  balance Int @default(0)
  currency String @default("TAKA")
  
  specialties DoctorSpecialty[]

  user      User   @relation(fields: [userId], references: [id])
  userId    String @unique

  education Education[]
  bio       String

  doctorPopularty DoctorPopularty?

  schedules Schedule[]
  bookings Booking[]

  rating Int @default(0)
  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Education {
  id     String  @id @default(cuid())
  degree String
  institute String
  year   String?

  doctor Doctor @relation(fields: [doctorId], references: [userId])
  doctorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id String @id @default(cuid())

  doctor   Doctor @relation(fields: [doctorId], references: [userId])
  doctorId String

  location   ScheduleLocation @relation(fields: [locationId], references: [id])
  locationId String

  serialFee Int?
  discountFee Int?
  visitFee Int?
  depositAmount Int?

  date       DateTime
  startTime String
  endTime   String

  maxAppointments Int
  bookings    Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ScheduleLocation {
  id        String     @id @default(cuid())
  name      String
  address   String
  city      String
  state     String?
  zip       String?
  country   String?
  latitude  Float?
  longitude Float?

  
  schedules Schedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id String @id @default(cuid())

  name String?
  phone String?
  note String?

  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  doctor Doctor @relation(fields: [doctorId], references: [userId])
  doctorId String

  status String? @default("PENDING")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id String @id @default(cuid())

  doctor Doctor @relation(fields: [doctorId], references: [userId])
  doctorId String

  rating Int
  comment String

  user  User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DoctorSpecialty {
  id String @id @default(cuid())

  doctor Doctor @relation(fields: [doctorId], references: [userId])
  doctorId String

  name String

  specialtyPopularty SpecialtyPopularty?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}


model DoctorPopularty {
  id String @id @default(cuid())

  doctor Doctor @relation(fields: [doctorId], references: [userId])
  doctorId String @unique

  views Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([views])
}

model SpecialtyPopularty {
  id String @id @default(cuid())

  doctorSpecialty DoctorSpecialty @relation(fields: [doctorSpecialtyId], references: [id])
  doctorSpecialtyId String @unique

  views Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([views])
}